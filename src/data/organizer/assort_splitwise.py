"""
Constructs a data directory
from: `SRC_DIR` which must be of the form:

    [SRC_DIR]/ 				(typically, called ds_phase_N_raw)
        - <wsi-name>/
            - Y/
            - N/
            - (others ...) - ignored
        - <wsi-name>/
            - .
            - .
            - .
		- experiment_splits.csv   (generated by `split_*` stage)


at the specified `DESTN_PATH` of the form:
    
    - [DESTN_PATH]/  (typically, called ds_phase_N)
        - splits/
            - train/
				- Y/
				- N/
            - valid/
                - Y/
				- N/
			- test/
                - Y/
				- N/
"""

#TODO: Use global config for setting paths

import os
import glob
import shutil
import itertools
import json
from pathlib import Path
import pandas as pd


# SET THESE PARAMETERS

#--enter
SRC_PATH = os.path.abspath(os.path.join(
    os.path.dirname(os.path.realpath(__file__)), *((os.path.pardir,)*3), 
    "dataset",
    "data",
    "roi",
    "ds_phase_3_raw"
))

#--enter
DESTN_PATH = os.path.abspath(os.path.join(
    os.path.dirname(os.path.realpath(__file__)), *((os.path.pardir,)*3), 
    "dataset",
    "data",
    "roi",
    "ds_phase_3"
))

#--enter
splits_to_extract = [ 'train', 'valid', 'test' ]

#--enter
classes_to_extract = [ 'Y', 'N' ]

# ---------------------------------


def assort_splitwise():
	"""
	Driver function for assorting split-wise
	"""

	try:
		splits_df = pd.read_csv(os.path.join(SRC_PATH, 'experiment_splits.csv'))
	except FileNotFoundError:
		print("[ERROR] Could not find `experiment_splits.csv`. Don't forget to run `split_data()` first!")
		return None

	split_path_map = {
		split_: os.path.join(DESTN_PATH, 'splits', split_)
		for split_ in splits_to_extract
	}

	split_class_path_map = {
		f"{split_}_{class_}": os.path.join(split_path_map.get(split_), class_) 
		for split_, class_ in itertools.product(splits_to_extract, classes_to_extract)
	}

	# Create destination template
	for _, path_ in split_class_path_map.items():
		Path(path_).mkdir(
			parents=True,
			exist_ok=False
		)
	print("[INFO] Destination template created.")

	# Assort data files by split
	for path_key, base_path in split_class_path_map.items():
		split_, class_ = tuple(path_key.split('_'))
		target_roi_l = splits_df.loc[
			(splits_df['split_category']==split_) & (splits_df['label']==class_),
			:
		]

		# update files list
		files_list[path_key] = list(target_roi_l['filepath'])

		# copy files
		print(f"[INFO] Starting to copy {len(target_roi_l)} ROIs for class `{class_}` in `{split_}` set.")
		for _, roi_row in target_roi_l.iterrows():
			shutil.copy2(
				src = roi_row.filepath,
				dst = split_class_path_map.get(path_key)
			)
		print(f"[INFO] Done copying {len(target_roi_l)} ROIs for class `{class_}` in `{split_}` set.")